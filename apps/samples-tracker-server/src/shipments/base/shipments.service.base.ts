/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Shipments as PrismaShipments } from "@prisma/client";

export class ShipmentsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ShipmentsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.shipments.count(args);
  }

  async shipmentsItems(
    args: Prisma.ShipmentsFindManyArgs
  ): Promise<PrismaShipments[]> {
    return this.prisma.shipments.findMany(args);
  }
  async shipments(
    args: Prisma.ShipmentsFindUniqueArgs
  ): Promise<PrismaShipments | null> {
    return this.prisma.shipments.findUnique(args);
  }
  async createShipments(
    args: Prisma.ShipmentsCreateArgs
  ): Promise<PrismaShipments> {
    return this.prisma.shipments.create(args);
  }
  async updateShipments(
    args: Prisma.ShipmentsUpdateArgs
  ): Promise<PrismaShipments> {
    return this.prisma.shipments.update(args);
  }
  async deleteShipments(
    args: Prisma.ShipmentsDeleteArgs
  ): Promise<PrismaShipments> {
    return this.prisma.shipments.delete(args);
  }
}
