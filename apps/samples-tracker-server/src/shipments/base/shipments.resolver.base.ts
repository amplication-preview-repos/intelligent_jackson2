/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Shipments } from "./Shipments";
import { ShipmentsCountArgs } from "./ShipmentsCountArgs";
import { ShipmentsFindManyArgs } from "./ShipmentsFindManyArgs";
import { ShipmentsFindUniqueArgs } from "./ShipmentsFindUniqueArgs";
import { CreateShipmentsArgs } from "./CreateShipmentsArgs";
import { UpdateShipmentsArgs } from "./UpdateShipmentsArgs";
import { DeleteShipmentsArgs } from "./DeleteShipmentsArgs";
import { ShipmentsService } from "../shipments.service";
@graphql.Resolver(() => Shipments)
export class ShipmentsResolverBase {
  constructor(protected readonly service: ShipmentsService) {}

  async _shipmentsItemsMeta(
    @graphql.Args() args: ShipmentsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Shipments])
  async shipmentsItems(
    @graphql.Args() args: ShipmentsFindManyArgs
  ): Promise<Shipments[]> {
    return this.service.shipmentsItems(args);
  }

  @graphql.Query(() => Shipments, { nullable: true })
  async shipments(
    @graphql.Args() args: ShipmentsFindUniqueArgs
  ): Promise<Shipments | null> {
    const result = await this.service.shipments(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Shipments)
  async createShipments(
    @graphql.Args() args: CreateShipmentsArgs
  ): Promise<Shipments> {
    return await this.service.createShipments({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Shipments)
  async updateShipments(
    @graphql.Args() args: UpdateShipmentsArgs
  ): Promise<Shipments | null> {
    try {
      return await this.service.updateShipments({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Shipments)
  async deleteShipments(
    @graphql.Args() args: DeleteShipmentsArgs
  ): Promise<Shipments | null> {
    try {
      return await this.service.deleteShipments(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
