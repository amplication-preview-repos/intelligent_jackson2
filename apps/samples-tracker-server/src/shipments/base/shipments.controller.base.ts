/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ShipmentsService } from "../shipments.service";
import { ShipmentsCreateInput } from "./ShipmentsCreateInput";
import { Shipments } from "./Shipments";
import { ShipmentsFindManyArgs } from "./ShipmentsFindManyArgs";
import { ShipmentsWhereUniqueInput } from "./ShipmentsWhereUniqueInput";
import { ShipmentsUpdateInput } from "./ShipmentsUpdateInput";

export class ShipmentsControllerBase {
  constructor(protected readonly service: ShipmentsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Shipments })
  async createShipments(
    @common.Body() data: ShipmentsCreateInput
  ): Promise<Shipments> {
    return await this.service.createShipments({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        shipmentNumber: true,
        status: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Shipments] })
  @ApiNestedQuery(ShipmentsFindManyArgs)
  async shipmentsItems(@common.Req() request: Request): Promise<Shipments[]> {
    const args = plainToClass(ShipmentsFindManyArgs, request.query);
    return this.service.shipmentsItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        shipmentNumber: true,
        status: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Shipments })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async shipments(
    @common.Param() params: ShipmentsWhereUniqueInput
  ): Promise<Shipments | null> {
    const result = await this.service.shipments({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        shipmentNumber: true,
        status: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Shipments })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateShipments(
    @common.Param() params: ShipmentsWhereUniqueInput,
    @common.Body() data: ShipmentsUpdateInput
  ): Promise<Shipments | null> {
    try {
      return await this.service.updateShipments({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          shipmentNumber: true,
          status: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Shipments })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteShipments(
    @common.Param() params: ShipmentsWhereUniqueInput
  ): Promise<Shipments | null> {
    try {
      return await this.service.deleteShipments({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          shipmentNumber: true,
          status: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
