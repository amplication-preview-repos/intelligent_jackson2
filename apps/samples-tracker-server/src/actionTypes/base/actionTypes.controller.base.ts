/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ActionTypesService } from "../actionTypes.service";
import { ActionTypesCreateInput } from "./ActionTypesCreateInput";
import { ActionTypes } from "./ActionTypes";
import { ActionTypesFindManyArgs } from "./ActionTypesFindManyArgs";
import { ActionTypesWhereUniqueInput } from "./ActionTypesWhereUniqueInput";
import { ActionTypesUpdateInput } from "./ActionTypesUpdateInput";

export class ActionTypesControllerBase {
  constructor(protected readonly service: ActionTypesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ActionTypes })
  async createActionTypes(
    @common.Body() data: ActionTypesCreateInput
  ): Promise<ActionTypes> {
    return await this.service.createActionTypes({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        action: true,
        description: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ActionTypes] })
  @ApiNestedQuery(ActionTypesFindManyArgs)
  async actionTypesItems(
    @common.Req() request: Request
  ): Promise<ActionTypes[]> {
    const args = plainToClass(ActionTypesFindManyArgs, request.query);
    return this.service.actionTypesItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        action: true,
        description: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ActionTypes })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async actionTypes(
    @common.Param() params: ActionTypesWhereUniqueInput
  ): Promise<ActionTypes | null> {
    const result = await this.service.actionTypes({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        action: true,
        description: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ActionTypes })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateActionTypes(
    @common.Param() params: ActionTypesWhereUniqueInput,
    @common.Body() data: ActionTypesUpdateInput
  ): Promise<ActionTypes | null> {
    try {
      return await this.service.updateActionTypes({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          action: true,
          description: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ActionTypes })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteActionTypes(
    @common.Param() params: ActionTypesWhereUniqueInput
  ): Promise<ActionTypes | null> {
    try {
      return await this.service.deleteActionTypes({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          action: true,
          description: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
