/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ActionTypes as PrismaActionTypes } from "@prisma/client";

export class ActionTypesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ActionTypesCountArgs, "select">
  ): Promise<number> {
    return this.prisma.actionTypes.count(args);
  }

  async actionTypesItems(
    args: Prisma.ActionTypesFindManyArgs
  ): Promise<PrismaActionTypes[]> {
    return this.prisma.actionTypes.findMany(args);
  }
  async actionTypes(
    args: Prisma.ActionTypesFindUniqueArgs
  ): Promise<PrismaActionTypes | null> {
    return this.prisma.actionTypes.findUnique(args);
  }
  async createActionTypes(
    args: Prisma.ActionTypesCreateArgs
  ): Promise<PrismaActionTypes> {
    return this.prisma.actionTypes.create(args);
  }
  async updateActionTypes(
    args: Prisma.ActionTypesUpdateArgs
  ): Promise<PrismaActionTypes> {
    return this.prisma.actionTypes.update(args);
  }
  async deleteActionTypes(
    args: Prisma.ActionTypesDeleteArgs
  ): Promise<PrismaActionTypes> {
    return this.prisma.actionTypes.delete(args);
  }
}
