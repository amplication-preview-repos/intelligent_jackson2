/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ActionTypes } from "./ActionTypes";
import { ActionTypesCountArgs } from "./ActionTypesCountArgs";
import { ActionTypesFindManyArgs } from "./ActionTypesFindManyArgs";
import { ActionTypesFindUniqueArgs } from "./ActionTypesFindUniqueArgs";
import { CreateActionTypesArgs } from "./CreateActionTypesArgs";
import { UpdateActionTypesArgs } from "./UpdateActionTypesArgs";
import { DeleteActionTypesArgs } from "./DeleteActionTypesArgs";
import { ActionTypesService } from "../actionTypes.service";
@graphql.Resolver(() => ActionTypes)
export class ActionTypesResolverBase {
  constructor(protected readonly service: ActionTypesService) {}

  async _actionTypesItemsMeta(
    @graphql.Args() args: ActionTypesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ActionTypes])
  async actionTypesItems(
    @graphql.Args() args: ActionTypesFindManyArgs
  ): Promise<ActionTypes[]> {
    return this.service.actionTypesItems(args);
  }

  @graphql.Query(() => ActionTypes, { nullable: true })
  async actionTypes(
    @graphql.Args() args: ActionTypesFindUniqueArgs
  ): Promise<ActionTypes | null> {
    const result = await this.service.actionTypes(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ActionTypes)
  async createActionTypes(
    @graphql.Args() args: CreateActionTypesArgs
  ): Promise<ActionTypes> {
    return await this.service.createActionTypes({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ActionTypes)
  async updateActionTypes(
    @graphql.Args() args: UpdateActionTypesArgs
  ): Promise<ActionTypes | null> {
    try {
      return await this.service.updateActionTypes({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ActionTypes)
  async deleteActionTypes(
    @graphql.Args() args: DeleteActionTypesArgs
  ): Promise<ActionTypes | null> {
    try {
      return await this.service.deleteActionTypes(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
