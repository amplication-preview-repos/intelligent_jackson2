/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BoxesService } from "../boxes.service";
import { BoxesCreateInput } from "./BoxesCreateInput";
import { Boxes } from "./Boxes";
import { BoxesFindManyArgs } from "./BoxesFindManyArgs";
import { BoxesWhereUniqueInput } from "./BoxesWhereUniqueInput";
import { BoxesUpdateInput } from "./BoxesUpdateInput";

export class BoxesControllerBase {
  constructor(protected readonly service: BoxesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Boxes })
  async createBoxes(@common.Body() data: BoxesCreateInput): Promise<Boxes> {
    return await this.service.createBoxes({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        typeField: true,
        capacity: true,
        barcode: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Boxes] })
  @ApiNestedQuery(BoxesFindManyArgs)
  async boxesItems(@common.Req() request: Request): Promise<Boxes[]> {
    const args = plainToClass(BoxesFindManyArgs, request.query);
    return this.service.boxesItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        typeField: true,
        capacity: true,
        barcode: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Boxes })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async boxes(
    @common.Param() params: BoxesWhereUniqueInput
  ): Promise<Boxes | null> {
    const result = await this.service.boxes({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        typeField: true,
        capacity: true,
        barcode: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Boxes })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBoxes(
    @common.Param() params: BoxesWhereUniqueInput,
    @common.Body() data: BoxesUpdateInput
  ): Promise<Boxes | null> {
    try {
      return await this.service.updateBoxes({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          typeField: true,
          capacity: true,
          barcode: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Boxes })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBoxes(
    @common.Param() params: BoxesWhereUniqueInput
  ): Promise<Boxes | null> {
    try {
      return await this.service.deleteBoxes({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          typeField: true,
          capacity: true,
          barcode: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
