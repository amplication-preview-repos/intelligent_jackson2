/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Boxes } from "./Boxes";
import { BoxesCountArgs } from "./BoxesCountArgs";
import { BoxesFindManyArgs } from "./BoxesFindManyArgs";
import { BoxesFindUniqueArgs } from "./BoxesFindUniqueArgs";
import { CreateBoxesArgs } from "./CreateBoxesArgs";
import { UpdateBoxesArgs } from "./UpdateBoxesArgs";
import { DeleteBoxesArgs } from "./DeleteBoxesArgs";
import { BoxesService } from "../boxes.service";
@graphql.Resolver(() => Boxes)
export class BoxesResolverBase {
  constructor(protected readonly service: BoxesService) {}

  async _boxesItemsMeta(
    @graphql.Args() args: BoxesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Boxes])
  async boxesItems(@graphql.Args() args: BoxesFindManyArgs): Promise<Boxes[]> {
    return this.service.boxesItems(args);
  }

  @graphql.Query(() => Boxes, { nullable: true })
  async boxes(
    @graphql.Args() args: BoxesFindUniqueArgs
  ): Promise<Boxes | null> {
    const result = await this.service.boxes(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Boxes)
  async createBoxes(@graphql.Args() args: CreateBoxesArgs): Promise<Boxes> {
    return await this.service.createBoxes({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Boxes)
  async updateBoxes(
    @graphql.Args() args: UpdateBoxesArgs
  ): Promise<Boxes | null> {
    try {
      return await this.service.updateBoxes({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Boxes)
  async deleteBoxes(
    @graphql.Args() args: DeleteBoxesArgs
  ): Promise<Boxes | null> {
    try {
      return await this.service.deleteBoxes(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
