/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TrackingEventService } from "../trackingEvent.service";
import { TrackingEventCreateInput } from "./TrackingEventCreateInput";
import { TrackingEvent } from "./TrackingEvent";
import { TrackingEventFindManyArgs } from "./TrackingEventFindManyArgs";
import { TrackingEventWhereUniqueInput } from "./TrackingEventWhereUniqueInput";
import { TrackingEventUpdateInput } from "./TrackingEventUpdateInput";

export class TrackingEventControllerBase {
  constructor(protected readonly service: TrackingEventService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TrackingEvent })
  async createTrackingEvent(
    @common.Body() data: TrackingEventCreateInput
  ): Promise<TrackingEvent> {
    return await this.service.createTrackingEvent({
      data: {
        ...data,

        location: data.location
          ? {
              connect: data.location,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        timestamp: true,
        action: true,
        reference: true,

        location: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TrackingEvent] })
  @ApiNestedQuery(TrackingEventFindManyArgs)
  async trackingEvents(
    @common.Req() request: Request
  ): Promise<TrackingEvent[]> {
    const args = plainToClass(TrackingEventFindManyArgs, request.query);
    return this.service.trackingEvents({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        timestamp: true,
        action: true,
        reference: true,

        location: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TrackingEvent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async trackingEvent(
    @common.Param() params: TrackingEventWhereUniqueInput
  ): Promise<TrackingEvent | null> {
    const result = await this.service.trackingEvent({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        timestamp: true,
        action: true,
        reference: true,

        location: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TrackingEvent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTrackingEvent(
    @common.Param() params: TrackingEventWhereUniqueInput,
    @common.Body() data: TrackingEventUpdateInput
  ): Promise<TrackingEvent | null> {
    try {
      return await this.service.updateTrackingEvent({
        where: params,
        data: {
          ...data,

          location: data.location
            ? {
                connect: data.location,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          timestamp: true,
          action: true,
          reference: true,

          location: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TrackingEvent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTrackingEvent(
    @common.Param() params: TrackingEventWhereUniqueInput
  ): Promise<TrackingEvent | null> {
    try {
      return await this.service.deleteTrackingEvent({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          timestamp: true,
          action: true,
          reference: true,

          location: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
