/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TrackingEvent } from "./TrackingEvent";
import { TrackingEventCountArgs } from "./TrackingEventCountArgs";
import { TrackingEventFindManyArgs } from "./TrackingEventFindManyArgs";
import { TrackingEventFindUniqueArgs } from "./TrackingEventFindUniqueArgs";
import { CreateTrackingEventArgs } from "./CreateTrackingEventArgs";
import { UpdateTrackingEventArgs } from "./UpdateTrackingEventArgs";
import { DeleteTrackingEventArgs } from "./DeleteTrackingEventArgs";
import { Locations } from "../../locations/base/Locations";
import { TrackingEventService } from "../trackingEvent.service";
@graphql.Resolver(() => TrackingEvent)
export class TrackingEventResolverBase {
  constructor(protected readonly service: TrackingEventService) {}

  async _trackingEventsMeta(
    @graphql.Args() args: TrackingEventCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TrackingEvent])
  async trackingEvents(
    @graphql.Args() args: TrackingEventFindManyArgs
  ): Promise<TrackingEvent[]> {
    return this.service.trackingEvents(args);
  }

  @graphql.Query(() => TrackingEvent, { nullable: true })
  async trackingEvent(
    @graphql.Args() args: TrackingEventFindUniqueArgs
  ): Promise<TrackingEvent | null> {
    const result = await this.service.trackingEvent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TrackingEvent)
  async createTrackingEvent(
    @graphql.Args() args: CreateTrackingEventArgs
  ): Promise<TrackingEvent> {
    return await this.service.createTrackingEvent({
      ...args,
      data: {
        ...args.data,

        location: args.data.location
          ? {
              connect: args.data.location,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => TrackingEvent)
  async updateTrackingEvent(
    @graphql.Args() args: UpdateTrackingEventArgs
  ): Promise<TrackingEvent | null> {
    try {
      return await this.service.updateTrackingEvent({
        ...args,
        data: {
          ...args.data,

          location: args.data.location
            ? {
                connect: args.data.location,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TrackingEvent)
  async deleteTrackingEvent(
    @graphql.Args() args: DeleteTrackingEventArgs
  ): Promise<TrackingEvent | null> {
    try {
      return await this.service.deleteTrackingEvent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Locations, {
    nullable: true,
    name: "location",
  })
  async getLocation(
    @graphql.Parent() parent: TrackingEvent
  ): Promise<Locations | null> {
    const result = await this.service.getLocation(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
