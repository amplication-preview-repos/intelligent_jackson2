/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  TrackingEvent as PrismaTrackingEvent,
  Locations as PrismaLocations,
} from "@prisma/client";

export class TrackingEventServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TrackingEventCountArgs, "select">
  ): Promise<number> {
    return this.prisma.trackingEvent.count(args);
  }

  async trackingEvents(
    args: Prisma.TrackingEventFindManyArgs
  ): Promise<PrismaTrackingEvent[]> {
    return this.prisma.trackingEvent.findMany(args);
  }
  async trackingEvent(
    args: Prisma.TrackingEventFindUniqueArgs
  ): Promise<PrismaTrackingEvent | null> {
    return this.prisma.trackingEvent.findUnique(args);
  }
  async createTrackingEvent(
    args: Prisma.TrackingEventCreateArgs
  ): Promise<PrismaTrackingEvent> {
    return this.prisma.trackingEvent.create(args);
  }
  async updateTrackingEvent(
    args: Prisma.TrackingEventUpdateArgs
  ): Promise<PrismaTrackingEvent> {
    return this.prisma.trackingEvent.update(args);
  }
  async deleteTrackingEvent(
    args: Prisma.TrackingEventDeleteArgs
  ): Promise<PrismaTrackingEvent> {
    return this.prisma.trackingEvent.delete(args);
  }

  async getLocation(parentId: string): Promise<PrismaLocations | null> {
    return this.prisma.trackingEvent
      .findUnique({
        where: { id: parentId },
      })
      .location();
  }
}
