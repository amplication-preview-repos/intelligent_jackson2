/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Samples } from "./Samples";
import { SamplesCountArgs } from "./SamplesCountArgs";
import { SamplesFindManyArgs } from "./SamplesFindManyArgs";
import { SamplesFindUniqueArgs } from "./SamplesFindUniqueArgs";
import { CreateSamplesArgs } from "./CreateSamplesArgs";
import { UpdateSamplesArgs } from "./UpdateSamplesArgs";
import { DeleteSamplesArgs } from "./DeleteSamplesArgs";
import { SamplesService } from "../samples.service";
@graphql.Resolver(() => Samples)
export class SamplesResolverBase {
  constructor(protected readonly service: SamplesService) {}

  async _samplesItemsMeta(
    @graphql.Args() args: SamplesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Samples])
  async samplesItems(
    @graphql.Args() args: SamplesFindManyArgs
  ): Promise<Samples[]> {
    return this.service.samplesItems(args);
  }

  @graphql.Query(() => Samples, { nullable: true })
  async samples(
    @graphql.Args() args: SamplesFindUniqueArgs
  ): Promise<Samples | null> {
    const result = await this.service.samples(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Samples)
  async createSamples(
    @graphql.Args() args: CreateSamplesArgs
  ): Promise<Samples> {
    return await this.service.createSamples({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Samples)
  async updateSamples(
    @graphql.Args() args: UpdateSamplesArgs
  ): Promise<Samples | null> {
    try {
      return await this.service.updateSamples({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Samples)
  async deleteSamples(
    @graphql.Args() args: DeleteSamplesArgs
  ): Promise<Samples | null> {
    try {
      return await this.service.deleteSamples(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
